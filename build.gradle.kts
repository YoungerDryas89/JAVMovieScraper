/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    base
    `java-library`
    `maven-publish`
    application
    distribution
    id("org.openjfx.javafxplugin").version("0.1.0")
    id("org.gradlex.extra-java-module-info") version "1.12"
}

repositories {
    gradlePluginPortal()
    mavenCentral()
    mavenLocal()
    maven {
        url = uri("https://repository.sonatype.org/content/groups/public/")
    }

    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }

    maven {
        url = uri("https://maven.covers1624.net/")
    }
}

dependencies {
    compileOnly(libs.org.jetbrains.annotations)
    testImplementation(libs.org.junit.vintage.junit.vintage.engine)
    testImplementation(libs.org.junit.jupiter.junit.jupiter.engine)
    // --- BEGINNING OF NON MODULE DEPENDENCIES ---
    implementation("commons-io:commons-io:2.14.0")
    implementation("org.imgscalr:imgscalr-lib:4.2")
    implementation("com.jgoodies:jgoodies-forms:1.9.0")
    implementation("com.cedarsoftware:json-io:4.14.1")
    implementation("com.thoughtworks.xstream:xstream:1.4.21")
    implementation("commons-cli:commons-cli:1.9.0")
    // --- END OF NON MODULE DEPENDENCIES --
    implementation(group = "org.openjfx", name = "javafx-controls", version = "24.0.1", classifier = "win")
    implementation(group = "org.openjfx", name = "javafx-controls", version = "24.0.1", classifier = "linux")
    implementation(group = "org.openjfx", name = "javafx-controls", version = "24.0.1", classifier = "mac")
    implementation(group = "org.openjfx", name = "javafx-graphics", version = "24.0.1", classifier = "win")
    implementation(group = "org.openjfx", name = "javafx-graphics", version = "24.0.1", classifier = "linux")
    implementation(group = "org.openjfx", name = "javafx-graphics", version = "24.0.1", classifier = "mac")
    implementation(group = "org.openjfx", name = "javafx-swing", version = "24.0.1", classifier = "win")
    implementation(group = "org.openjfx", name = "javafx-swing", version = "24.0.1", classifier = "linux")
    implementation(group = "org.openjfx", name = "javafx-swing", version = "24.0.1", classifier = "mac")
    implementation("org.gradlex:extra-java-module-info:1.12")
    implementation(libs.org.apache.commons.commons.lang3)
    implementation(libs.commons.codec.commons.codec)
    implementation(libs.org.apache.commons.commons.csv)
    implementation(libs.com.jgoodies.jgoodies.common)
    implementation(libs.org.hamcrest.hamcrest.core)
    implementation(libs.org.json.json)
    implementation(libs.io.jsondb.jsondb.core)
    implementation(libs.org.jsoup.jsoup)
    implementation(libs.org.apache.httpcomponents.httpcore)
    implementation(libs.org.apache.httpcomponents.httpclient)
    implementation(libs.com.github.ben.manes.caffeine.caffeine)
    implementation(libs.com.twelvemonkeys.imageio.imageio.webp)
    implementation("net.covers1624:curl4j:3.0.17:libcurl")
}

group = "com.github.youngerdryas89.moviescraper"
version = "0.9.5"
description = "JAVMovieScraper"
java.sourceCompatibility = JavaVersion.VERSION_21
java.targetCompatibility = JavaVersion.VERSION_21

extraJavaModuleInfo {
    deriveAutomaticModuleNamesFromFileNames = true
}

javafx {
    version = "24.0.1"
    modules = mutableListOf("javafx.controls", "javafx.graphics", "javafx.swing")
}

application {
    applicationDefaultJvmArgs = listOf("-Dcom.github.youngerdryas89.moviescraper.version=${version}")
    mainModule = "com.github.youngerdryas89.moviescraper"
    mainClass = "com.github.youngerdryas89.moviescraper.Main"
}

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<JavaCompile>() {
    options.compilerArgs = listOf("-Xlint:deprecation")
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}

tasks.withType<Copy>(){
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType<Jar> {
    archiveClassifier = "all"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(sourceSets.main.get().output)
    dependsOn(configurations.runtimeClasspath)
    from({
        configurations.runtimeClasspath.get().filter {
            it.name.endsWith("jar")
        }.map { zipTree(it) }})

    manifest {
        attributes(mapOf("Main-Class" to "com.github.youngerdryas89.moviescraper.Main"))
    }
}
